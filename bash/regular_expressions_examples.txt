Regular Expressions:
=======================

anto@office:~$ cat ss
cat
tac
asdadasdd adasd
as
anto@office:~$ cat ss | egrep 'cat\>'
cat
anto@office:~$ 
anto@office:~$ cat mac_addr  | egrep "[0-9a-fA-F]"
23:3e:4r:5e:dd:a0
00:21:28:75:ae:4c
anto@office:~$
anto@office:~$ cat mac_addr  | egrep '^[0-9A-Fa-f][0-9A-Fa-f]:[0-9A-Fa-f][0-9A-Fa-f]:[0-9A-Fa-f][0-9A-Fa-f]:[0-9A-Fa-f][0-9A-Fa-f]:[0-9A-Fa-f][0-9A-Fa-f]:[0-9A-Fa-f][0-9A-Fa-f]'
00:21:28:75:ae:4c
anto@office:~$
anto@office:~/mutt_stuff$ cat s |egrep "[0-9]?[0-9]:[0-9][0-9].(am|pm)"
18:53 am
9:23 pm
anto@office:~/mutt_stuff$ 
anto@office:~$ cat mac_addr  | egrep '[^0-9A-Fa-f:]'
23:3e:4r:5e:dd:a0
anto@office:~$ cat mac_addr  | egrep -v '[^0-9A-Fa-f:]'
00:21:28:75:ae:4c
anto@office:~$ 
anto@office:~$ cat sample | egrep "((([0-9a-f]){2}:){5})[0-9a-f]{2}"
00:21:28:75:ae:4c
anto@office:~$ 


Regular Expressions shortcuts:
=============================
\w - matches letters and numbers = [a-zA-Z0-9]
\W - matches all characters other than letters and numbers = [^a-zA-Z0-9] 
\d - matches digits = [0-9]
\D - matches non-digits characters = [^0-9]
\a - Alert
\b - Word boundary
[\b] Backspace character
\B - Non-word boundary
\c x - Control character
\d xxx - Decimal value for a character
\f - Form feed character
\r - Carriage return
\n - Newline character
pass:[<literal>\o</literal>

Octal value for a character

<replaceable>\ xxx</replaceable>]

\s - Space character
\S - Non-space character
\t - Horizontal tab character
\v - Vertical tab character


anto@office:~$ cat h1.sed 
#!/usr/bin/sed

s/^/<h1>/
s/$/<\/h1>/
q
anto@office:~$ sed -f h1.sed rime.txt 
<h1>THE RIME OF THE ANCYENT MARINERE, IN SEVEN PARTS.</h1>
anto@office:~$ perl -ne 'if ($. == 1) { s/^/<h1>/; s/$/<\/h1>/m; print; }' rime.txt
<h1>THE RIME OF THE ANCYENT MARINERE, IN SEVEN PARTS.</h1>
anto@office:~$ 
Here is what happened in the Perl command, broken down again into pieces:
• perl invokes the Perl program.
• The -n option loops through the input (the file rime.txt).
• The -e option allows you to submit program code on the command line, rather
than from a file (like sed).
• The if statement checks to see if you are on line 1. $. is a special variable in Perl
that matches the current line.
• The first substitute command s finds the beginning of the first line (^) and inserts
an h1 start-tag there.
• The second substitute command searches for the end of the line ($), and then inserts
an h1 end-tag.
• The m or multiline modifier or flag at the end of the substitute command indicates
that you are treating this line distinctly and separately; consequently, the $ matches
the end of line 1, not the end of the file.
• At last, it prints the result to standard output (the screen).
• All these operations are performed again the file rime.txt.


